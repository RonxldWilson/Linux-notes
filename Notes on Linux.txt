####################################################################
Ways to access a Linux System
1. Console
2. Remote - Need the IP address to connect remotely

If you want to connect to Linux machine via windows remotely you will need to connect via Putty Client on windows 
This connection is done via CLI

You can connect Via SSH if WIN 10 is the OS which is used for the opertion


## What is files System?

## File System in Linux

/boot - files that is used by the boot loader
/root root user home dir
/dev System devices 
/etc Confoig files
/bin -> /usr/bin - Everyday user commands
/sbin -> /usr/bin - Systme filesystem commands
/opt - Optional
/proc Running Processs
/lib - C programming lib files need by commands
/tmp - Dir for temp files
/home - dir for user
/var - System logs
/run - Systen daemons that start very early to store runtime files like PID files
/mnt To mount external filesystem
/media For cdrom mounts

### Commands for Traversing the File System

pwd = print working directory
cd = change directory
ls -l = list all the files in the directory 

#Linux File properties

# of links - Number of Hard links to the file. 
    For a hard link the # of hard links is the number of immediate subdirectories it has plus it's parent directory and itself


#Linux File Types

- = Regular File
d = directory
l = Link
c = Special file or Device file
s = socket
p = Named Pipe
b = block device


What is Root?

There are three types of root on Linux Systme
1. Root Account
2. Root as /: the very first directory in Linux is also refferred as root dir
3. Root home directory: the root ujser account also has a directory located in /root whihc is called root home directory

## Changing password = passwd userid


#File System paths

there are two types of paths:
    -   absolute path
    -   relative path

cd /var/log/samba

or cd var   
    cd log
    cd samba

## Creating Files and directories
    -   touch   Empty file 
    -   cp  Copying an existing file 
    -   vi  creating file using editor

Creating dir
    -   mkdir

-> ls -ltr - to list the files and order them in a timely manner

-> To exit VIM use :wq!

To Copy a directory use the cp command with -R option for recursuve and specify the source
and destination directories to be opened

cp -R <source folder> <destination folder>

To find a file use -"find" and "locate"

-> find . -name "<name of the file>" = . means start from the current location
-> find / -anme "<name of the file>"  = use this command to search from a particular repository

# Diffrence between find and locate
    -   Locate uses DB to find the file
        -   Need to run updatedb if the the DB is not updated
    -   Find iterates over the filesystem to locate the files

Locate is faster than the Find command

## wildcard
* - zero or more characters
? - represents a single character
[]  - represents a range of characters 

-> touch abc{1..9}-xyz = this will create the files from 1 to 9

## Hard Links and Soft Links

inode = Pointer or a number of a file on the hard disks

Soft Link = Link will be removed if the file is removed or renamed
Hard Link = Deleting renaming or moving the original file will not affect the hard link

Command: ln     = for hard link 
         ln -s  = for soft link

It's not possible to create a hard or soft link within the same directory, the links need to be made in the diffrent directory

Command: cat   = for viewing the file 
Command: echo  = for writing to the file

Hard links work within the same partiion

The rm command to remove the file doesn't remove the source of the file, it just removes the link to the file

Command: passwd username = to change the password of a user

Linux file system types: xfs, ext2, ext3
windows file System types: NTFS 


Command: ls -ltri = Lists the inodes of the file 

# Command Syntax
    Command Option arguments

    Options: Modify the way that a command works
    usually consist of a hyphen or a dash followed by a single letter
    some commands accept multiple options which can be grouped together

    Arguments: Most command are uswed with one arguments
    Some commands assume a default commadn if none is supplied
    Argumetns are optional for some commands but required for others

#### File Permissions
    UNIX is a multi-user system. Every file and directory in your account can be protected
    from or made accessible to other users by changing its access permissions. Every user has
    responsibility for controlling access to their files.
    -   Permissions for a file or directory may be restricted to by types
    -   There are 3 type of permissions
            r -read
            w- write
            x - execute running a program
    -   Each permission (rwx) can be controlled at three levels
            u- user yourself
            g - group can be people in the same project
            o - other = everyone on the system
    - File or Directory permission can be displayed by running ls -I command
        -rwx rwx rwx
    Command to change permission.
        -   chmod

Command: man <command> = Manual of the command 

Command chmod g-w <filename>    =   This removes the write access to the file for the group
        chmod a-r <filename>    =   This removes the read access to the file for everyone 
        chmod u-r <filename>    =   This removes the read access from the user

        chmod u+rw <filename>   = This gives the user read and write access  
        chmod ugo+r <filename>   = This gives the user read access  

 if you remove the x access from a directory then you wont be able to access the directory and open it



Table for numerical assigning access

Numebr      Permission Type     Symbol
0           No Permission       -
1           Execute             -x
2           Write               -w-
3           Execute+Write       -wx
4           Read                r--
5           Read+Execute        r-x
6           Read+Write          rw-
7           Read+Write+Execute  rwx

Ex: chmod 764 <filename>
    This gives the access as rwx to the user, rw to the group and read to all others

####################################################################
File Ownership

There are 2 ownners of a file or directory
    User and group

Command to change file Ownership
    chown and chgrp
        chown changes the ownership of a file
        chgrp changes the froup ownership of a file
Recursive ownership change option (cascade)
    -R 

####################################################################
ACL - Access Control List 

What is ACL?
    Access control list (ACL) provides an additional, more flexible permission mechanism
    for file systems. It is designed to assist with UNIX file permissions. ACL allows you to
    give permissions for any user or group to any disc resource.
Use of ACL
    Think of a scenario in which a particular user is nota member of group created by you
    but still you want to give some read or write access, how can you do it without making
    user a member of group, here comes in picture Access Control Lists, ACL helps us to do
    this trick
    Basically, ACLs are used to make a flexible permission mechanism in Linux.
    From Linux man pages, ACLs are used to define more fine-grained discretionary access
    rights for files and directories.
Commands to assign and remove ACL permissions are:
    setfacl and getfacl

List of commands for setting the ACL
1. To add permission for user
    setfacl -m u:user:rwx /path/to/file

2. To add permission for a group
    setfacl -m u:group:rwx /path/to/file

3. To allow all files or directories to inherit ACL entries from the directory it is within
    setfacl -Rm "entry" /path/to/dir

4. To remove a specific entry
    setfacl -x u:user   /path/to/file (For a specific user)

5. To remove all entries
    setfacl -b path/to/file (For all users)

Note:
    As you assign the ACL permission to a file/directory it adds + sign at the end of the permission
    Setting write permission with ACL does not allow to remove a file

Command: getfacl <filename>

The point of ACL is that sometimes I want to give read access to for just one particular user, not the group
just that one user, then we need to use ACLs 
#######################################################

Help Commands

1. whatis command
2. man command 
3. command --help 
#######################################################
 
#Adding Text to Files
    3 Simple ways to add text to a file
    -   vi
    -   Redirect command output > or >>  
    -   echo > or >>

The single redirect > will overwrite the entire contents of the file 
The double redirect >> will write it to the next line

You can output the content of a command right into a file as well

command: ls -ltr > <filename> = This will put the output in the file

##########################################################

Input and Output Redirects

There are 3 redirects in Linux
    1. Standard Input (stdin) and it has file descriptor number 0
    2. Standard output (stdout) and it has file descriptor as 1
    3. Standard error (stderr) and it has file descriptor as 2

Note: files with . in the beginnings are hidden files 

Example: telnet localhost 2> errorfile

    This will route the standard errors which are displayed to the errorfile and only display the useful things

# Standard output to a file (tee)

The Tee command is used to store and view (both at the same time) the output of a command

Command: echo "Hello world" | tee HelloWorld    =   this will add the contents to the file, like a > redirects does and also display the output
        echo "Hello world" | tee -a HelloWorld = This will append the file and add the contents in the next line


##############################################33
PIPES 

A pipe is used by the shell to connect the output of one command directly to the input of another command

The symbol is this |

Ex: Command1 [args]  | command2 [args]

Ex: comnmand: ls -ltr | more    =   this shows the Output one page at a time
command: ls -l | tail -1    =   This shows the last line of the output

#######################################################

File Maintenance commands
    cp
    rm
    mv 
    mkdir
    rmdir or rm -r 
    chgrp 
    chown

    To rename a file follow this : mv <old file> <new filename>

###############################################

File Display Commands   
    cat
    more
    less 
    head
    tail 

Note: you can use . to signify the current location 

###############################################

Text Processing Commands

    -cut = Cut the output
    -awk = allows to list by the columns
    -grep & egrep - To find the particular occurence of a particular word
    -sort = sorts the output in order
    -uniq = unique occurence in the file
    -wc = word count of the file 


Command: Cut

Cut is a command line utility that allows you to cut parts of lines from specified files or piped data and
print the result to standard output. It can be used to cut parts of a line by delimiter byte position, and
character
cut filename = doesn't work
cut --version = Check version
cut cl filename = List one character
Cut -c1,2,4     = pick and choose the character
cut -cl-3 filename = List range of characters
cut-c1-3,6-8 filename = List specific range of characters
cut bl-3 filename = List by byte size
cut -d: -f 6 /etc/passwd = List first 6th column separated by :
cut -d: -f 6-7 /etc/passwd = List first 6 and 7th column separated by
1s -1 | cut -c2-4 = Only print user permissions of files/dir

###############################################################

Command: awk

awk is a utility/language designed for data extraction. Most of the time it is used to extract fields from a file or from an output

awk --version   = Check version
awk '(print $1)' file       = List 1st field of the file  
ls -l | awk '{print $1,$3}'     = List 1 and 3" field of ls - output
ls -l | awk '{print $NF}'       = Last field of the output
awk '/Jerry/ {print}' file      = Search for a specific word
awk -F: '(print $1)' /etc/passwd    = Ouput only 1st field of /etc/passwd
echo "Hello Tom" | awk '{$2="Adam"; print $0}'      = Replace words field words
cat file | awk '{$2="Imran"; print $0}'     = Replace words field words
awk 'length ($0)> 15' file      = Get lines that have more than 15 byte size
ls -l | awk '{if ($9 == "seinfeld") print $0;}'     = Get the field matching seinfeld in /home/iafzal
ls -l | awk '{print NF}'    =   Number of fields.

#####################################################################
grep/egrep

#####################################################################
sort/uniq
#####################################################################
wc 


#####################################################################
Compare files

command: diff (Line by Line)
This will show the lines in which the two files differ by:
    Command: diff <file 1> <file 2>

command: cmp (byte by byte)
    cmp <file 1> <file 2>



There's not much option to compare two files in windows, this gives an advantage to linux users

#####################################################################
Compress and uncompressing Files

Command: tar = it takes a bunch of files and put them together also called as tarring
Command: tar cvf <file.tar> /path = This will compress the files as well 
Command: tar xvf <file name> =  this will extract everything

Command: gzip = This is used for actual compression of the files
Command: gzip -d OR gunzip = This is used for uncompressing a file

Generally you can Tar and then zip the file for compression
#####################################################################
Truncate File Size

The Linux truncate command is often used to shrink or extend the size of a file to the specified size
NOTE: THIS IS NOT THE SAME AS ZIP, THIS CHOPS OFF THE ACTUAL FILE SIZE AND REDUCES THE FILE SIZE IN THAT WAY 

Command: truncate -s 10 filename

#######################################################################

Combining and Splitting Files
    -   Multiple files can be combined into one and 
    -   One file can be split into multiple files

    Command: cat file1 file2 file3 > file4
    
    Command: split -l 300 file.txt childfile

    Split file.txt into 300 liner per file and output to childfileaa, childfileab, childfileac


#########################################################################

Linux File Editor 

There are several editors which are available
    vi - Visual Editor
    ed - Standard Line Editor
    ex - Extended Line Editor
    emacs - A full screen editor
    pico - Begineer's editor
    vim - Advance version of vi

#vi supplies commands for:
    Inserting and deleting text
    Replacing text
    Moving around the file
    Finding and substituting strings
    Cutting and pasting text

#Most common keys:
    i - insert
    Esc - Escape out of any mode
    r - replace
    d - delete
    :q!- quit without saving
    :wq! = quit and save

Command: vi HelloWorld
    As soon as you hit enter you are in command mode,  then you need to press 'i' or 'r' to do operations on it
    Once you are in the editing mode, you can edit the file
    Once that is done, press :wq! to exit and save
    OR
    Press Shift Z Z (Z twice)
    You can press 'u' in command mode to undo changes 
    If you press 'X' that deletes a character
    If you want to press enter in the middle of a para, go to the required line, and press 'O'
    To find a word in the file press '/' in command mode and then type the word, this will reveal the word in the file

####################################################################

There is another editor called as Vim which you need to learn to work properly 

    go to wwww.openvim.com and complete the course on vim to learn this tool
    www.vimgenius.com
    vim-adventures.com (Game to learn Vim)

Vim is the next edition of vi editor
Most of the commands of Vim work on Vi as well 

#####################################################################
Command: sed
    Replace a string in a file with a newstring
    Find and delete a line
    Remove empty lines
    Remove the first or n lines in a file
    To replace tabs with spaces
    Show defined lines from a file
    Substitute within vi editor
    And much more..

It's too complicated, read the documentation on it using man

#####################################################################
#####################################################################
User Account Management

Commands:
    useradd
    groupadd
    userdel 
    groupdel
    usermod
    id <username> verifies if the user is created 


Files where the record is kept of the user changes which are made:
    /etc/passwd 
    /etc/group
    /etc/shadow 

Example: 
    Command: useradd -g superheros -s /bin/bash -c "iser description" -m -d /home/spiderman spiderman

    -g to add to the group
    -s to give a shell
    -c for user description
    -m -d to define the home directory and the user home directory 
    and then the user itself

    
to apply these rules you need to be root for it to work
 
If the usergroup is not defined then the  username will create another usergroup

Example: 
    useradd spiderman
    id spiderman - will reveal if the user is created
    cd /home/   -   whenever a user is created a home directory is also created with it
    groupadd superheros 
    cat /etc/groups = At the bottom the newly created groups are displayed

    usermod -G superheros spiderman = this changes the group of the user


    cat etc/passwd 
    cat etc/group 
    cat etc/shadow
            
#####################################################################
Enabling Password Aging 

There is a file called as: /etc/login.defs

This contains the default password rules like PASS_MAX_DAYS, PASS_MIN_DAYS, PASS_MIN_LEN and so on
Using this you can set the default parameters to be used for user administration

 It also has other details which can be edited and are imporatant for security constraints

 Command for a particular user:

 Command: ch age [-d lastday] [-m mindays] [-M maxDays] [-W warndays] [-I inactive] [-E expieredatye] user 
#######################################################################

Switch User and Sudo Access

su -username = this makes the person a root user
sudo = if you dont have root access 
visudo = it edits the file which contains the name of the users who have sudo access
    The file which is edited is /etc/sudoers


#######################################################################
Monitor Users

Command:    
    -   who  = gives the number of people who are logged in and how many terminals they have open
    -   last  = Last time the user logged in, for every single user 
    -   w   =    Works pretty much as who but gives way more info
    -   finger = does a trace of your user and shows where they are coming from and what kind of protocol they are using
    -   id  =  Gives the info about you, if put id username, will give the info about the user

#######################################################################

Talking to Users
Command:
    -   users   = To display who all are logged in
    -   Wall    = Broadcast the message to everyone - Enter the message after pressing wall and hit ctrl + D 
    -   Write  <username> = To command to one particular user

#######################################################################

Linux Account Authentication

Types of Accounts
    Local Account
    Domain/Directory Accounts

LDAP = Lightweight Direcotry access protocol

Suppose you have to create a new user to a thousand diffrent servers, it is not possible to individually add them
to all those servers. Therefore you will need to use a server/directory server which contains the name of the users
and autheticates them to the server.

#######################################################################

Diffrence between Active Directory, LDAP, IDM, WinBIND, OpenLDAP and other services

Active Directory = Owned by Microsoft 
IDM = Idenentity Manager developed by redhat
WinBIND = Used in linux to communicate with windows(developed by Samba) you can use the windows directory to authenticate linux users

OpenLDAP (Open Source)
IBM Directoy server
Jump Cloud

All of this are directory services, they use LDAP behind the scenes to run the process 
All of these can be installed and run on the server to manage the access management 

LDAP is a protocol aka Lightweight Directory access protocol

#######################################################################

System Utility Commands

Commands:
    -   date    = Displays the date of the server  
    -   uptime  = Displays the uptime of the server and the load average. Shows the average in 1 min, 5min, and 15 min   
    -   hostname = Displays the hostname of the linux machine 
    -   uname   = Tells that you are in linux machine
        uname -a = more details
    -   which pwd = will display the location of the file of the command
        Note = all commands are script which are written by developers and is atext file in itself
    -   cal     = Displays Calendar
        cal 9 1977 displays calendar of that year
        cal 2023 = displays the whole year calendar
    -   bc      =  basic calculator 

######################################################################

Processes and Jobs

Application = Services are like program which run on computers
Script = Shell script or commands are list of instructions 
Process = when you start an applocation it genrated processes 
Daemon is alos a process which listens to the incoming and outgoing traffic
Threads = Every process could have multiple threads associated with it
Job or Workorder = Runs a service or process at a scheduled time

Commands:
    -   Systemctl or service =  
    -   ps  =   Displays all the processes which are running 
    -   top = displays the use of memory and other details by the machine
    -   kill = To kill a process
    -   Crontab = when a process is scheduled then it becomes a Job
    -   at = similar to crontab


#################################################################################

#################################################################################

#################################################################################

#################################################################################

#################################################################################

#################################################################################

#################################################################################

#################################################################################
Shell Scripting

Linux Kernel - Interface between hardware and software
Kernel talks to the hardware 

Layers of a computer
1. User
2. Application
3. Shell - GUI, bash, csh
4. Kernel
5. Hardware - CPU, Memory and HD

Shell and Kernel built together makes up the operating system.

Shell+Application = software

#################################################################################
What is a shell?
    Its like a container, it holds the enviroment information
    Interface between users and kernel/OS
    CLI is a Shell

Find your Shell
    echo $0
    available Shells "cat /etc/shells 
    your shell /etc/passwd 

windows GUI is a shell
Linux KDE GUI is a shell
Linux sh, bash etc. is a shell

#################################################################################
Types of Linux Shell
    -   Gnome - Both are GUI Shells
    -   KDE - Both are GUI Shells
    -   sh - Shell 
    -   bash - Born again shell 
    -   csh and tcsh - These are built on C 
    -   ksh - korn shell - mostly used in solaris 

    If you have a csh you cant run bash   

You are given shell at the time of user creation


#################################################################################

What is a Shell Script?
    A shell script is an executable file containing multiple shell commands that are executed sequetially. 
    The File can contain
    -   Shell(#!/bin/bash)      - This defines that you are going to run the script in bash shell environment
    -   Comments(# comments)
    -   Commands (echo, cp, grep etc)
    -   Statements (if, while, for etc)

    Shell scripts should have an executable permission (e.g. -rwx r-x r-x)
    Shell script has to be called from absolute path (eg /home/userdir/script.bash)
    If called from current location then ./script.bash


#################################################################################
Basic Shell scripts

    Command:
        echo: Output to screen
        Creating Tasks:
            Telling your id, current location, your files/directories, system info
            Creating files or Directories
            Output to a file ">"

        Filters/Text processors through scripts (cut, awk, grep, sort, uniq, wc)

#################################################################################
Shell Scripting Examples

If then Scripts 

<add from the handouts>
#################################################################################
Check other servers connectivity

This task can also be done thru monitoring tools
<add the scripts thru the course>

#################################################################################
For Loop Scripts Example


#################################################################################
Case Statements Scripts

#################################################################################

#################################################################################
ALIASES

Alias is a command which is used to create a concatenated command for repetetive commands

Command: 
    alias ls="ls -al"
    alias pl="pwd; ls"
    alias tell="whoami; hostname;pwd"
    alias lmar="ls -l | grep Mar"               // This command will first list down all the files in the dir, and then find the file with Mar

User Alias

Aliases are created just for once, while the session is active, if the user logs out the alias is removed. 
Additionally the alias wont be available if the user is logging in from any other way thru a devce or putty

#####User Alias
To Create and save the alias permanently
GoTo -> home directory -> ls -la -> GoTo /etc/bashrc file-> vi this file
and add at the end 
    alias l="ls -ltri"

#####Global Alias
To Create and save the alias permanently
GoTo -> home directory -> ls -la -> this will display .bashrc file-> vi this file
and add at the end 
    alias l="ls -ltri"



#################################################################################
Shell History

Commmand: 
    history

This will display all the commands you have ran till date on the system as that user

If you want to run a previously ran command, you can just
    Command:    !<Command Number>

History of the commands is stored in : "/home/username/.bash_history

This can also be used as a diagnostic tool to see what all commands did the users ran which got the server down

If you remember the certain instance of what was ran, you can grep or awk from the history command

To view the other users history become Root

-cat /home/users-dir-name/.bash_history

#################################################################################
Networks for Linux
#################################################################################
Networking Componets

1. IP - An IP address is used to refer to a machine on a network
2. Subnet Mask - is a 32 bit number that masks the IP address and divides the IP address into
network address and host address. Subnet mask is made by setting network bits to 1 and setting host bits to all 0s


Note: ifconfig stands for interface configuration

 

#################################################################################

#################################################################################
